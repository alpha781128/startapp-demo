using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using MultiLanguages.Translator;
using Startapp.Client.Services;
using Startapp.Client.Shared.Auth;
using Startapp.Shared;
using Startapp.Shared.Models;
using System;
using System.Text.Json;
using System.Threading.Tasks;

namespace Startapp.Client.Shared
{
    public class LoginDisplayBase : ComponentBase
    {
        class AuthParams
        {
            public string AccessToken { get; set; }
            public string Provider { get; set; }
            public string RefreshToken { get; set; }
            public string ExpireIn { get; set; }            
        }      

        [Inject] public IAuthService AuthService { get; set; }
        [Inject] public IJSRuntime JsRuntime { get; set; }
        [Inject] public CurrentUserInfo CurrentUserInfo { get; set; }
        [CascadingParameter] public ILanguageContainerService Translate { get; set; }
        [CascadingParameter] public UserProfile Profile { get; set; }
        [Parameter] public Action OnLogOutAsync { get; set; }

        protected LoginDialog LoginDialog { get; set; }
        protected RegisterDialog RegisterDialog { get; set; }
      

        protected override async Task OnInitializedAsync()
        {
            await GetAuthStateAsync();  // Our app need to call this method to load an new access-token if the old one is expired, by using refresh-token received in the same time with the expired access-token,
                                        // Or if the first time when we use external provider, we call this to exchange token provided externally, by
                                        // Another from our Api, "token from external provider => token from our platform generated by IdentityServer4" because,
                                        // Our platform expect tokens generated locally for mores security reasons
            CurrentUserInfo.PropertyChanged += CurrentUserInfoChanged;
            //await JsRuntime.InvokeAsync<string>("MdbThemeInitialization");
        }

        private async Task GetAuthStateAsync()
        {
            string AuthState = await JsRuntime.InvokeAsync<string>("GetAuthParamsFromLocalStorege");
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };
            var json = JsonSerializer.Deserialize<AuthParams>(AuthState, options);
           
            //await JsRuntime.InvokeAsync<object>("RemoveAccountStateParams");
            if (!string.IsNullOrEmpty(json.RefreshToken))
            { // 1st case, we need to get access-token using refresh-token "access-token => refresh-token"
                var date = JsonSerializer.Deserialize<DateTime>(json.ExpireIn, options);
                if (IsTokenExpired(date))
                {
                    var lr = await AuthService.RefreshTokenAsync(json.RefreshToken);
                    AuthService.SetTimer(Functions.RemainingTime(lr.ExpiresIn));
                }
                else
                {
                    AuthService.SetTimer(Functions.RemainingTime(date));
                }
                return;
            }
            if (!string.IsNullOrEmpty(json.AccessToken))
            {   // 2nd case, we need to get access-token using external access-token,
                // "external access-token => internal access-token"              
                var lr = await ExchangeTokenAsync(json.AccessToken, json.Provider);
                await JsRuntime.InvokeAsync<object>("RemoveUnusedParams");
                AuthService.SetTimer(Functions.RemainingTime(lr.ExpiresIn));
                return;
            }
            return;
        }      

        public async Task<LoginResponse> ExchangeTokenAsync(string token, string provider)
        {
            // Change external access-token by internal access-token 
            // To authenticate user by changing token
            var param = new ExternalTokenRequest
            {
                Token = token,
                Provider = provider
            };
            return await AuthService.LogWithExternalProviderAsync(param);
        }       

        private void CurrentUserInfoChanged(object sender, EventArgs e)
        {
            StateHasChanged();
        }

        protected async void Login()
        {
            //LoginModel.RememberMe = true;
            await JsRuntime.InvokeAsync<object>("ShowModal", "loginModal");
        }

        protected async void Register()
        {
            await JsRuntime.InvokeAsync<object>("ShowModal", "registerModal");
        }

        public async Task LogOut()
        {
            await AuthService.LogoutUserAsync();
            OnLogOutAsync.Invoke();
            StateHasChanged();
        }

        private static bool IsTokenExpired(DateTime expireDate)
        {
            return expireDate < DateTime.UtcNow;
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await JsRuntime.InvokeAsync<string>("MdbThemeInitialization");
            }
        }


    }
}
